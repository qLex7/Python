#Algorithme tp2
#Exo 5
from math import*

class Point:	#Exercice 1
	"""Classe definissant un point par:
	- x
	- y
	- z"""
	def __init__(self,x,y,z):
		self.x=0
		self.y=0
		self.z=0
			
	def Afficher (self):      #Exercice 2
		print"(",self.x,",",self.y,",",self.z,")"

	def Saisir (self):        #Exercice 3
		self.x=input("Valeur a x:")
		self.y=input("Valeur a y:")
		self.z=input("Valeur a z:")
		
	def inf_ou_egal(self,Q):   #Exercice 4
		q.x=3
		q.y=5
		q.y=7
		if(self.x<Q.x):
			return True
		if(self.x>Q.x):
			return False
		if( self.y<Q.y):
			return True
		if(self.y>Q.y):
			return False
		if(self.z<Q.z):
			return True
		if(self.z>Q.z):
			return False
		return True
	
	def distance(self,Q):   #Exercice 5
		return sqrt((self.x-Q.x)**2+(self.y-Q.y)**2+(self.z-Q.z))

#---------
		
class collection:    #Exercice 6
		"""Classe definissant une collection de points"""
		def __init__(self):
			self.L=[]
	
		def ajouter(self,P):  #Exercice 7
			self.L.append(P)
		
		def afficher(self):  #Exercice 8
			print"["
			for i in xrange(0,len(self.L)):
					self.L[i].affichage(),"]"	
		
		
		
		def appartient(self,A):   #Exercice 9
			d=self.L.distance(A)
			if (d<0.00001):return True
			else: return False
			
		def inter(self, C):		#Exercice 10
			d=self.L.distance(C.L)
			if(d<=self.R+C1.R): return True
			else: return False
			
		def moyenne(self):   #Exercice 11
			m=Point()
			
			x, y, z= 0, 0, 0
			
			for e in self.points:
				x += p.x
				y += p.y
				z += p.z
				
			taille =len(self.points)
			
			x/= taille
			y/= taille
			z/= taille
			
			m.setPosition(x, y, z)
			
			return m
			
			
		def ind_pg(self,n):     #Exercice 12
			ind=0
			for i in  xrange(n):
				if self.L[ind].inf_ou_egal(self.L[i]):
					ind=i
			return ind
			
		def trier(self):
			N=len(self.L)
			for i in xrange(0,N-1):
				ind=self.ind_pg(N-i)
				self.L[ind],self.L[N-i-1]=self.L[N-i-1],self.L[ind]
		
		
		
		
		
	
		
	
p=Point()
Q=Point()

p=Saisir()
Q=Saisir()

p=Afficher()
Q=Afficher()


print p.inf_ou_egal(Q)
print p.distance(Q)





